
UARTproj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z13uart_transmiti>:
		
	}
	

return UDR;
}
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z13uart_transmiti>
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <_Z10USART_Initv>:


void USART_Init()
{
	UCSRA=0;
  74:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0;
  76:	1a b8       	out	0x0a, r1	; 10
	UCSRC=0;
  78:	10 bc       	out	0x20, r1	; 32
	UCSRA |= (1<<U2X);
  7a:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB |= (1<<RXEN)|(1<<TXEN);
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	88 61       	ori	r24, 0x18	; 24
  80:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  82:	80 b5       	in	r24, 0x20	; 32
  84:	86 68       	ori	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
	UBRRL = 191;
  88:	8f eb       	ldi	r24, 0xBF	; 191
  8a:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  8c:	10 bc       	out	0x20, r1	; 32
  8e:	08 95       	ret

00000090 <main>:
	
}

int main( void )
{
	 USART_Init();
  90:	0e 94 3a 00 	call	0x74	; 0x74 <_Z10USART_Initv>
	  DDRC=0b00000001;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	84 bb       	out	0x14, r24	; 20
	PORTC=0b00000000;
  98:	15 ba       	out	0x15, r1	; 21
UDR=data;
}

int uart_receieve (void)
{
	while(!UCSRA & (1<<RXC)){
  9a:	8b b1       	in	r24, 0x0b	; 11
		
	}
	

return UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	3f e7       	ldi	r19, 0x7F	; 127
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1e>
  ae:	00 00       	nop
	 while(1)
	 {	int buffer;
	 buffer=uart_receieve();
	  _delay_ms(100);
	  //PORTC ^= (1<<PINC0);
	   uart_transmit(buffer) ;
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z13uart_transmiti>
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0xa>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
